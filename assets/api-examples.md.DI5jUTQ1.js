import{_ as e,c as a,o,a3 as i}from"./chunks/framework.BZaIkLTY.js";const u=JSON.parse('{"title":"组件库介绍","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"api-examples.md","filePath":"api-examples.md"}'),l={name:"api-examples.md"},t=i('<h1 id="组件库介绍" tabindex="-1">组件库介绍 <a class="header-anchor" href="#组件库介绍" aria-label="Permalink to &quot;组件库介绍&quot;">​</a></h1><p>组件库共10个组件，分为四类：<code>常规组件</code>，<code>数据展示组件</code>，<code>表单组件</code>，<code>反馈组件</code>。</p><h2 id="组件库开发思路" tabindex="-1">组件库开发思路 <a class="header-anchor" href="#组件库开发思路" aria-label="Permalink to &quot;组件库开发思路&quot;">​</a></h2><h3 id="技术选型" tabindex="-1">技术选型： <a class="header-anchor" href="#技术选型" aria-label="Permalink to &quot;技术选型：&quot;">​</a></h3><ol><li>使用<code>Vue3</code>完成组件基本功能开发。</li><li>使用<code>Vitepress</code>完成组件库文档编写。</li><li>选择<code>Vitest</code>和<code>Vue Test Utils</code>完成组件的单元测试编写，保障组件库质量达到工业级项目的标准。</li><li>选择Font Awesome popper.js等第三方库完成组件的二次封装，实现开箱即用的组件。</li></ol><h3 id="开发流程" tabindex="-1">开发流程 <a class="header-anchor" href="#开发流程" aria-label="Permalink to &quot;开发流程&quot;">​</a></h3><ol><li>先搭建项目整体框架。</li><li>拆分组件，编写出每个组件的整体轮廓和大致需求。</li><li>针对每个组件做详细的需求分析，精确到<code>props</code> <code>interface</code> <code>emits</code> <code>slot</code>。</li><li>编写组件的功能代码。</li><li>编写组件样式和动画效果。</li><li>编写基本的测试用例并通过测试。</li><li>发布组件库到npm官网。</li></ol>',7),c=[t];function d(r,s,n,p,_,h){return o(),a("div",null,c)}const f=e(l,[["render",d]]);export{u as __pageData,f as default};
